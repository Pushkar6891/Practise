1. Spring Data Rest
2. What are Microservices?
3. What is REST?
4. Why REST?
5. Spring Data REST?
6. Creating a Spring Data REST
7. Event Management API
   Organizer 			Event 				Participant
-- ID INT			-- ID INT			-- ID INT
-- NAME VARCHAR			-- CREATED TIMESTAMP		-- NAME VARCHAR
-- CREATED TIMESTAMP		-- NAME VARCHAR			-- EMAIL VARCHAR
				-- DESCRIPTION VARCHAR		-- CHECKED_IN INT
				-- START_TIME TIMESTAMP		-- EVENT_ID INT
				-- END_TIME TIMESTAMP
				-- ZONE_ID TIMESTAMP
				-- STARTED INT
				-- ORGANIZER_ID INT
				-- VENUE_ID INT
	     
				Venue
				-- ID INT
				-- CREATED TIMESTAMP
				-- NAME VARCAHAR
				-- STREET_ADDRESS VARCHAR
				-- STREET_ADDRESS2 VARCHAR
				-- CITY VARCHAR
				-- STATE VARCHAR
				-- COUNTRY VARCHAR
				-- POSTAL_CODE VARCHAR

Organizer (one organizer to many with Event)
Participant (many participants can take part in one Event)
Venue (one venue can host many Event)

8. Testing REST API using POSTMAN
9. Paging and Sorting using Spring Data REST
10. Customize JSON Responses
11. Implement Query Methods or custom finder methods supported by Spring Data like : findOne, findById, findAll, findByName
12. Customize or Add Custom Business Logics using "Custom Controller Methods"
13. Projections and Excerpts
14. How to configure HAL Browser for REST ful API?
15. Secure : Authentication and Authorization a URL Level and at Java Method Level
16. Setup: Java (JDK 8), Eclipse STS IDE , MySQL Server (5.6) + MySQL Workbench (Download+Install+Configure), Postman (Test RESTful API GET, POST, PUT, DELETE)
===================================================
17. To connect to MYSQL Server from MYSQL Workbench? 
Add Server
Hostname : 127.0.0.1
Port     : 3306
Username : root
Password : root
===================================================
18. Monolithic Application
Hospital Management Application -> Patient Registration, Patient Clinical, Bed Management, Claim Management
In case of monilithic app:
- code fix
- deployment
- other module dependency
===================================================
19. Microservices
Patient Registration, Patient Clinical, Bed Management, Claim Management
Characteristics:
1. Small and Focussed Service
2. Autonomous (Build and Deploy on its own)
3. Communication across services happen using REST or network calls 
4. Can you change and deploy our application without changing or impacting other services?
5. Heterogenous (each microservice can run on different platform and different programming language)
6. Robustness (if one component fails it should not bring down entire application, there should be graceful degrade the particular service)
7. Scalablity (if no. of users increase it should be able to cope up with existing load)
8. Easy to deploy ()
9. Reusable and Replaceable
===================================================
20. SOA and Microservices
Service Oriented Architecture vs Microservices
Microservices are bettwer version of SOA
SOA had some problems
1. Lack of understanding on how to implement SOA
2. Lack of Vendor Support
3. Vendors started selling the product
4. How to break down application into smaller components?
===================================================
21. What is REST?
REST : Representational State Transfer
Web Browser : RESTful Client
Web Site : RESTful Provider
Web Browser invokes using the web service using "HTTP GET" 
Web Site provides the Video or response in 
HTTP allows us to implement REST.
Operations: CREATE, READ, UPDATE, DELETE (CRUD)
===================================================
22. RESTFul principles:
1. Uniform Interface & Easy Access.
Using HTTP methods/ HTTP verbs:
GET, POST, PUT, DELETE
Using URI / NOUNS:
/employees
/departments
===================================================
Types of URI
1. Collection Resource URI
2. Items Resource URI
===================================================
1. GET
2. POST
To Create an Employee use POST : /employees
POST /employees
{
	name: "bharath",
	dept: "IT"
}

3. PUT
To Update the Employee resource use PUT /employees/1
You need to update the complete resource.
Use PATCH if you want to update a Partial Resource
/PATCH /employees
{
	"dept":"psychology",
}
4. DELETE
To delete the Object use DELETE
/DELETE
===================================================
Key REST Principles
1. Single HTTP Interface
2. Easy to Access
3. Multiple Representations (supported using HTTP Mime Types)
4. HATEOAS (Hypermedia as the Engine of Application State)
- Provide a link in the response using which client can navigate through the rest if the application
- HATEOAS is a standard in the REST API which says "responses should include hyperlinks which allows clients to navigate through our restful application.
- HAL (Hypermedia Text Language) is a format for sharing hyperlinks
- HAL is an implementation of HATEOAS
"name":"John",
"links":{
	"self":{
		"href":"http://localhost:8080/employee-ap/employees/1"
	}
}
===================================================

23. Why REST is the best way to implement Microservices?
1. Heterogenous (communication is done using REST, support XML,JSON and build on HTTP)
2. Robustness
3. Stateless (REST does not maintain the state)
4. Scalable (as no of users increase)
5. REST apps are easy to deploy
6. REST apps are "Reusabale and Replaceable"
===================================================
24. What is Spring Data REST?
1 Before "Spring Data REST" we use "Spring MVC" by creating Controllers, Serviec Layers, Data Access Layer
2. Spring Data simplyfy the DAO layer . If you want to implement DAO use JPA Entity and Implement CrudRepository (save, findOne, findAll, delete, count)
3. "Spring Data Rest" uses "Spring Data" where all Database Entity is exposed as a "RESTful Resource", we get HAL and HATEOAS suppport
Eg: Create a JPA Entity or DTO Employee, Create a DAO like 
public interface EmployeeRepository extends CrudRepository<Employee, Long>{}
htps://localhost:8080/employee-api
===================================================
Create an Entity "Employee" and Expose it out as a RESTful entity using 4 steps:
1. Create a Employee table in the Database
2. Create a Spring Boot Project
3. Create a DTO/Domain Model/Entity
4. Create a Repository interface
5. Create a DataSource in the application.properties
===================================================
Spring Boot 2.x changes
Change 1.
Old:
Employee employee = findOne(employeeId)
New: 
Optional<Employee> employeeOptional = findById(employeeId) (Reactive Programming)
if(employeeOptional.isPresent()){
	Employee employee = employeeOptional.get();
}

Change 2. 
Old:
@Id
@GeneratedValue(strategy=GenerationType.AUTO) => hibernate sequence does not exist
private Long Id;
New:
@Id
@GeneratedValue(strategy=GenerationType.IDENTITY)
private Long Id;
===================================================
1. Create an Employee table in the Database
create table Employee(
id int NOT NULL AUTO_INCREMENT,
first_name varchar(20),
last_name varchar(20) PRIMARY KEY(ID));

2. Create a Spring Boot Project
1. File Menu -> Spring Starter Project -> Name: employee-api, GroupID: com.bharath.springdatarest, ArtifactID: employee-api
2. Dependencies -> Rest Repositories, MYSQL, JPA

3. Create a Domain Model or JPA Entity
package com.bharath.springdatarest.employee.entities
@Entity
public class Employee{
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
 	private Long id;
	private String firstName;
	private String lastName;

	//getters + setters 
}

4. Create a Employee Repository Interface
package com.bharath.springdatarest.employees.repos

public interface EmployeeRepository extends CrudRepository<Employee,Long>{
	
}

5. Create a dataSource in application.properties
spring.datasource.name=employee-datasource
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=root
spring-datasource.password=root
server.servlet.context-path = /employee-api

Running the application:
Run as Java App
http://localhost:8080
O/P:
{
_links:{
	employees: {
		href : "http://localhost:8080/employees"
	},
	profile:{
		href : "http://localhost:8080/profile"
		}
	}
}

// profile provides meta information to clients for building forms dynamically

http://localhost:8080/employees
O/P:
{
embedded: {
	employees: [ ]
},
_links:{
	self: {
		href : "http://localhost:8080/employees"
	},
	profile:{
		href : "http://localhost:8080/profile"
		}
	}
}
===================================================
1. Getting Employee Object
HTTP Method: GET	URL: localhost:8080/employees
1. Creating Employee Resource using POST
HTTP Method: POST	URL: localhost:8080/employees
Body:
Application/JSON
{
	"firstName":"Bharath",
	"lastName":"Thippireddy"
}
Click Send
Response 201 Created
2. Creating Employee Resource using PUT (PUT method replaces the entire object)
HTTP Method: PUT	URL: localhost:8080/employees/1
Body:
Application/JSON
{
	"firstName":"Pushkar",
	"lastName":"Thippireddy"
}
3. PATCH
HTTP Method: PATCH	URL: localhost:8080/employees/1
Body:
Application/JSON
{
	"firstName":"Arjun"
}
4. DELETE
HTTP Method: DELETE	URL: localhost:8080/employees/1
Response : 200 OK
===================================================
Response Status Codes
===================================================
1. Changes for Spring 2.x
1. Delete the M2 repository
2. No findOne() method use findById()
No delete method use deleteById()
Eg:
Optional<Employee> optionalEmployee = findById(id);
1. Employee e = findById(emoId).get();
2. deleteById()
Configure a custom context path (add in application.properties)
server.context-path=/employee-api
server.servlet.context-path = /employee-api
===================================================
1. Event Management API
   Organizer 			Event 				Participant
-- ID INT			-- ID INT			-- ID INT
-- NAME VARCHAR			-- CREATED TIMESTAMP		-- NAME VARCHAR
-- CREATED TIMESTAMP		-- NAME VARCHAR			-- EMAIL VARCHAR
				-- DESCRIPTION VARCHAR		-- CHECKED_IN INT
				-- START_TIME TIMESTAMP		-- EVENT_ID INT
				-- END_TIME TIMESTAMP
				-- ZONE_ID TIMESTAMP
				-- STARTED INT
				-- ORGANIZER_ID INT
				-- VENUE_ID INT
	     
				Venue
				-- ID INT
				-- CREATED TIMESTAMP
				-- NAME VARCAHAR
				-- STREET_ADDRESS VARCHAR
				-- STREET_ADDRESS2 VARCHAR
				-- CITY VARCHAR
				-- STATE VARCHAR
				-- COUNTRY VARCHAR
				-- POSTAL_CODE VARCHAR
2.  Create tables in mysql
Create a db : eventdb
createTables.sql
---------------
create database events;
use events;
create table organizer(id int not null auto_increment,..);
create table venue(id int not null auto_increment,...);
create table event(id int not null auto_increment,... foreign key(organizer_id) references organizer(id) on delete cascade, foreign key(venue_id) references venue(id));
dropTables.sql
---------------
drop table participant;
drop table organizer;
drop table event;
drop table venue;
3. Create the Spring Boot Project , Create Domain Model or JPA Entity which represent the resources, Create the Repository, Configure Data Source, Run the application
3.1 Create the Spring Boot Project 
project name: eventmanagement-api
group_id: com.bharath.springdatarest
artifact id: 
package: 
3.2 Creating the Domain Model or JPA Entities 
Tools for creating JPA Entities: 
1. Dowload all the entities as it is
2. Create and Associate the entities or Defining the association amongst entities by defining annotations
2.1 Create a parent Abstract Class containing common fields
package com.bharath.eventmanagement.entities;
@MappedSuperClass
public class AbstractEntity{
	@Id
	@Column(nullable=false, updateable=false)
	@GeneratedValue(strategy-GenerationType.AUTO)
	protected Long id;
	@CreationTimestamp
	@Column(updateable=false)
	protected Instant created;
	// getters and Setters
}
2.2 Create a JPA Entity : Event
package com.bharath.eventmanagement.entities;
@Entity
public class Event extends AbstractEntity{
	private String name;
	private String description;
	private ZoneDateTime startTime;
	private ZoneDateTime endTime;
	private ZOneId zone_id;
	private Boolean started;
	@ManyToOne(fetch=FetchType.EAGER)
	@JoinColumn(nullable=false)
	private Organizer organizer;
	@OneToMany(mappedBy="event",fetch=FetchType.EAGER,cascade=CascadeType.ALL, orphanRemoval=true)
	private Set<Participant> participants;
	@ManyToOne(fetch=FetchType.EAGER,cascade=CascadeType.ALL)
	@RestResource(exported=false)
	private Venue venue;
	// getters and Setters
	@Override
	public boolean equals(Object obj){
		return Objects.equals(id,(Event)obj.id);
	}
	@Override
	public int hashCode(){
		return Objects.hash(id);
	}
}
2.3 Create a JPA Entity : Venue
package com.bharath.eventmanagement.entities;
@Entity
public class Venue extends AbstractEntity{
	private String name;
	private String street_address;
	private String street_address2;
	private String city;
	private String state;
	private String country;
	private String postalCode;
	// getters and Setters
	@Override
	public boolean equals(Object obj){
		return Objects.equals(id,(Venue)obj.id);
	}
	@Override
	public int hashCode(){
		return Objects.hash(id);
	}
}
2.4 Create a JPA Entity : Organizer
package com.bharath.eventmanagement.entities;
@Entity
public class Organizer extends AbstractEntity{
	private String name;
	@OneToMany(mappedBy="organizer")
	private Set<Event> events;
	// getters and Setters
	@Override
	public boolean equals(Object obj){
		return Objects.equals(id,(Organizer)obj.id);
	}
	@Override
	public int hashCode(){
		return Objects.hash(id);
	}
}
2.5 Create a JPA Entity : Participant
package com.bharath.eventmanagement.entities;
@Entity
public class Participant extends AbstractEntity{
	@JoinColumn(nullable=false)
	private String name;
	@JoinColumn(nullable=false)
	private String email;
	private Boolean checked_in;
	@ManyToOne(fetch=FetchType.EAGER,nullable=false,updateable=false)
	@JoinColumn(referencedColumnName="ID",)
	private Event event;
	// getters and Setters
	@Override
	public boolean equals(Object obj){
		return Objects.equals(id,(Participant)obj.id);
	}
	@Override
	public int hashCode(){
		return Objects.hash(id);
	}
}
2.6 Implementing equals() and hashCode() for Event, Participant, Venue, Organizer
3.3 Create the Repository interfaces

package com.bharath.eventmanagement.repos;
public class EventRepository extends CrudRepository<Event,Long>{}

package com.bharath.eventmanagement.repos;
public class OrganizerRepository extends CrudRepository<Organizer,Long>{}

package com.bharath.eventmanagement.repos;
public class ParticipantRepository extends CrudRepository<Participant,Long>{}

package com.bharath.eventmanagement.repos;
public class VenueRepository extends CrudRepository<Venue,Long>{}
3.4 Configure the data Source
spring.datasource.name=eventmanagement-datasource
spring.datasource.url=jdbc:mysql://localhost:3306/events
spring.datasource.username=root
spring-datasource.password=root
server.servlet.context-path = /eventmanagement-api
3.5 Add Jackson JSR 310 Dependency
<dependency>
<groupId>com.fasterxml.jackson.datatype</groupId>
<artifactId>jackson-datatype-jsr310</artifactId>
<version>2.8.7</version>
</dependency>
3.6 Add a converter Serialization for Java.time add annotation @EntityScan
@SpringBootApplication
@EntityScan(basePackageClasses={EVentmanagemnetApi.class,Jsr310Converters.class})
public class EventmanagementapiAppplication{
	psvm(){
		SpringApplication.run(EventmanagementapiAppplication.class,args);
	}
}
3.7 Run the application
Right CLick EventmanagementApiApplication. and run
3.8 Test using Postman
HTTP Method: POST	URL: http://localhost:8080/eventmanagement-api/organizers
{
	"name":"Pushkar Chauhan"
}
Create an Event
HTTP Method: POST	URL: http://localhost:8080/eventmanagement-api/events
{
	"name":
}
===================================================
Customize Spring Data Rest (Create an association using @RestResource)
Create a Participant using Postman
{
	"name":"John",
	"email":"john@gmail.com",
	"event":"/events/1",
	"checkedIn":"false"
}
Update an existing event using PUT
GET	http://localhost:8080/eventmanagement-api/events/2	Fetch the already existing event which you want to update using PUT
PUT	http://localhost:8080/eventmanagement-api/events/2	JSON(application/json)
Delete an event using DELETE
DELETE  http://localhost:8080/eventmanagement-api/events/2	no response will be sent after executing delete

Expose the ID or resourceID of the resource in Venue, Organizer, Event, Participant
In each entity create a method so that primary key field can be serialized
public Long getResourceId(){ return this.id;} 
===================================================
1. Paging
extends PagingAndSortingRepository
public interface VenueRepository extends PagingAndSortingRepository{} instead of crudRepository
public interface EventRepository extends PagingAndSortingRepository{} instead of crudRepository
public interface OrganizerRepository extends PagingAndSortingRepository{} instead of crudRepository
public interface ParticipantRepository extends PagingAndSortingRepository{} instead of crudRepository
"page": {
	"size":2,
	"totalElements":10,
	"totalPages":1,
	"number":0
	
}
http://localhost:8080/eventmanagement-api/events?page=0&size=5
2. Change default Page Size
change in application.properties
spring.data.rest.default-page-size=5
3. Sorting
extend PagingAndSortingRepository
GET	http://localhost:8080/eventmanagement-api/events?sort=id,desc	=> This will sort by resourceId in descending order
GET	http://localhost:8080/eventmanagement-api/events?sort=id,asc	=> This will sort by resourceId in ascending order
GET	http://localhost:8080/eventmanagement-api/events?sort=id,asc,sort=name	=> This will sort by resourceId in ascending order
===================================================
Customizing JSON Serialization
Use annotation @JsonPropertyOrder("resourceId") on top of the entity class.
Use JSONIgnore and JSONProperty
JackSon-Converter Annotations:
@JsonIgnore
@JsonProperty("desc")
===================================================
Create Custom Finder Methods
Spring Data REST uses all functionality of Spring Data
Implement Custom Finder Method using "Query Method" or "Spring Data Query" or "finderMethod"
1. CrudRepository uses findOne, findAll or findById
Use custom method: findByName, findByPostalCode.
2. findBy method
find an event by Name : 
public interface EventRepository extends PagingAndSortingRepository<Event,Long>{
	List<Event> findByName(@Param("name") String name);
}
To enable Paging in Spring Data REST (change return type to Page and include a parameter "Pageable")
Page<Event> findByName(@Param("name") String name, Pageable pageable);
3. find By Multiple Parameters
filter by Name as well as zoneId
Page<Event> findByNameAndZoneId(@Param("name") String name,@Param("zoneId") ZoneId zoneId);
===================================================
Create Custom Controller Methods
Organizer --->(id) Start
	<-----(exception)(event does not exist)
Adding a custom exception
2. Participant should be able to checkin
	<-----(exception)(unable to checkin)
Steps to create a custom controller methods
1. Create a Controller Class 
2. Mark it with annotations: "@RepositoryRestController" and @RequestMapping(uri) or @Controller or @RestController
3. Create Business Logic or methods inside Controller
3. Mark these methods with annotations: @GetMapping, @PostMapping, @DeleteMapping
4. Mapping parameters from Request to Java Method use annotations like "@PathVariable", "@PathParam", "@RequestBody"(take post or put body and map to java method), "@QueryParam", @Qualifier, @ResponseBody
===================================================
Create a class EventKickOffController
package com.bharath.contollers
@RepositoryRestController
@RequestMapping("/events")
public class EventKickOffController{

	// Method to start an event
	@PostMapping("/start/{id}")
	public ResponseEntity start(@PathVariable Long id){
		// Retrieve the event from the DB
		@Autowired
		EventRepository eventRepository;
		return null;
	}

}
===================================================